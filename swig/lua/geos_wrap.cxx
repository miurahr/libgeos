/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GeosCoordinateSequence swig_types[0]
#define SWIGTYPE_p_GeosGeometry swig_types[1]
#define SWIGTYPE_p_GeosGeometryCollection swig_types[2]
#define SWIGTYPE_p_GeosIndexItem swig_types[3]
#define SWIGTYPE_p_GeosLineString swig_types[4]
#define SWIGTYPE_p_GeosLinearRing swig_types[5]
#define SWIGTYPE_p_GeosMultiLineString swig_types[6]
#define SWIGTYPE_p_GeosMultiLinearRing swig_types[7]
#define SWIGTYPE_p_GeosMultiPoint swig_types[8]
#define SWIGTYPE_p_GeosMultiPolygon swig_types[9]
#define SWIGTYPE_p_GeosPoint swig_types[10]
#define SWIGTYPE_p_GeosPolygon swig_types[11]
#define SWIGTYPE_p_GeosPreparedGeometry swig_types[12]
#define SWIGTYPE_p_GeosQueryCallback swig_types[13]
#define SWIGTYPE_p_GeosSTRtree swig_types[14]
#define SWIGTYPE_p_GeosWkbReader swig_types[15]
#define SWIGTYPE_p_GeosWkbWriter swig_types[16]
#define SWIGTYPE_p_GeosWktReader swig_types[17]
#define SWIGTYPE_p_GeosWktWriter swig_types[18]
#define SWIGTYPE_p_p_GeosLinearRing swig_types[19]
#define SWIGTYPE_p_size_t swig_types[20]
#define SWIGTYPE_p_std__string swig_types[21]
#define SWIGTYPE_p_unsigned_char swig_types[22]
static swig_type_info *swig_types[24];
static swig_module_info swig_module = {swig_types, 23, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "geos"
#define SWIG_init      luaopen_geos
#define SWIG_init_user luaopen_geos_user

#define SWIG_LUACODE   luaopen_geos_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <stdio.h>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


	#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <stdexcept>

 
#include "geos_c.h"
/* Needed for va_start, etc. */
#include <stdarg.h>


    static const int DEFAULT_QUADRANT_SEGMENTS=8;



/* This is not thread safe ! */
static const int MESSAGE_SIZE = 1000;
static char message[MESSAGE_SIZE];

void noticeHandler(const char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    vsnprintf(message, sizeof(message) - 1, fmt, args);
    va_end(args);
}

void errorHandler(const char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    vsnprintf(message, sizeof(message) - 1, fmt, args);
    va_end(args);
}


typedef void GeosCoordinateSequence;

void checkCoordSeqBounds(const GEOSCoordSeq coordSeq, const size_t index)
{
    unsigned int size = 0;
    GEOSCoordSeq_getSize(coordSeq, &size);

    if (index < 0 || index >= size)
        throw std::runtime_error("Index out of bounds");
}

SWIGINTERN GeosCoordinateSequence *new_GeosCoordinateSequence(size_t size,size_t dims){
        return (GeosCoordinateSequence*) GEOSCoordSeq_create(size, dims);
    }
SWIGINTERN void delete_GeosCoordinateSequence(GeosCoordinateSequence *self){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        return GEOSCoordSeq_destroy(coords);
    }
SWIGINTERN GeosCoordinateSequence *GeosCoordinateSequence_clone(GeosCoordinateSequence *self){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        return (GeosCoordinateSequence*) GEOSCoordSeq_clone(coords);
    }
SWIGINTERN int GeosCoordinateSequence_setX(GeosCoordinateSequence *self,size_t idx,double val){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        return GEOSCoordSeq_setX(coords, idx, val);
    }
SWIGINTERN int GeosCoordinateSequence_setY(GeosCoordinateSequence *self,size_t idx,double val){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        return GEOSCoordSeq_setY(coords, idx, val);
    }
SWIGINTERN int GeosCoordinateSequence_setZ(GeosCoordinateSequence *self,size_t idx,double val){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        return GEOSCoordSeq_setZ(coords, idx, val);
    }
SWIGINTERN int GeosCoordinateSequence_setOrdinate(GeosCoordinateSequence *self,size_t idx,size_t dim,double val){
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        return GEOSCoordSeq_setOrdinate(coords, idx, dim, val);
    }
SWIGINTERN double GeosCoordinateSequence_getX(GeosCoordinateSequence *self,size_t idx){
        double result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        GEOSCoordSeq_getX(coords, idx, &result);
        return result;
    }
SWIGINTERN double GeosCoordinateSequence_getY(GeosCoordinateSequence *self,size_t idx){
        double result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        GEOSCoordSeq_getY(coords, idx, &result);
        return result;
    }
SWIGINTERN double GeosCoordinateSequence_getZ(GeosCoordinateSequence *self,size_t idx){
        double result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        GEOSCoordSeq_getZ(coords, idx, &result);
        return result;
    }
SWIGINTERN double GeosCoordinateSequence_getOrdinate(GeosCoordinateSequence *self,size_t idx,size_t dim){
        double result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        checkCoordSeqBounds(coords, idx);
        GEOSCoordSeq_getOrdinate(coords, idx, dim, &result);
        return result;
    }
SWIGINTERN unsigned int GeosCoordinateSequence_getSize(GeosCoordinateSequence *self){
        unsigned int result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        GEOSCoordSeq_getSize(coords, &result);
        return result;
    }
SWIGINTERN unsigned int GeosCoordinateSequence_getDimensions(GeosCoordinateSequence *self){
        unsigned int result;
        GEOSCoordSeq coords = (GEOSCoordSeq) self;
        GEOSCoordSeq_getDimensions(coords, &result);
        return result;
    }

typedef void GeosGeometry;
typedef void GeosPoint;
typedef void GeosLineString;
typedef void GeosLinearRing;
typedef void GeosPolygon;
typedef void GeosGeometryCollection;
typedef void GeosMultiPoint;
typedef void GeosMultiLineString;
typedef void GeosMultiLinearRing;
typedef void GeosMultiPolygon;

typedef void GeosWktReader;
typedef void GeosWktWriter;
typedef void GeosWkbReader;
typedef void GeosWkbWriter;


bool checkBoolResult(char result)
{
    int intResult = (int) result;

    if (intResult == 1)
        return true;
    else if (intResult == 0)
        return false;
    else
        throw std::runtime_error(message);
}

SWIGINTERN void delete_GeosGeometry(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_clone(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSGeom_clone(geom);
    }
SWIGINTERN char *GeosGeometry_geomType(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSGeomType(geom);
    }
SWIGINTERN int GeosGeometry_typeId(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSGeomTypeId(geom);
    }
SWIGINTERN void GeosGeometry_normalize(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        int result = GEOSNormalize(geom);

        if (result == -1)
            throw std::runtime_error(message);
    }
SWIGINTERN int GeosGeometry_getSRID(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSGetSRID(geom);
    }
SWIGINTERN void GeosGeometry_setSRID(GeosGeometry *self,int SRID){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSSetSRID(geom, SRID);
    }
SWIGINTERN size_t GeosGeometry_getDimensions(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSGeom_getDimensions(geom);
    }
SWIGINTERN size_t GeosGeometry_getNumGeometries(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        size_t result = GEOSGetNumGeometries(geom);
        
        if ((int)result == -1)
            throw std::runtime_error(message);

        return result;
    }
SWIGINTERN GeosGeometry *GeosGeometry_intersection(GeosGeometry *self,GeosGeometry *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return (GeosGeometry*) GEOSIntersection(geom, otherGeom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_buffer(GeosGeometry *self,double width,int quadsegs){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSBuffer(geom, width, quadsegs);
    }
SWIGINTERN GeosGeometry *GeosGeometry_convexHull(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSConvexHull(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_difference(GeosGeometry *self,GeosGeometry *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return (GeosGeometry*) GEOSDifference(geom, otherGeom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_symDifference(GeosGeometry *self,GeosGeometry *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return (GeosGeometry*) GEOSSymDifference(geom, otherGeom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_boundary(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSBoundary(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_geomUnion(GeosGeometry *self,GeosGeometry *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return (GeosGeometry*) GEOSUnion(geom, otherGeom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_pointOnSurface(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSPointOnSurface(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_getCentroid(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSGetCentroid(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_getEnvelope(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSEnvelope(geom);
    }
SWIGINTERN char *GeosGeometry_relate(GeosGeometry *self,GeosGeometry *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return GEOSRelate(geom, otherGeom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_lineMerge(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return GEOSLineMerge(geom);
    }
SWIGINTERN GeosGeometry *GeosGeometry_simplify(GeosGeometry *self,double tolerance){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSSimplify(geom, tolerance);
    }
SWIGINTERN GeosGeometry *GeosGeometry_topologyPreserveSimplify(GeosGeometry *self,double tolerance){
        GEOSGeom geom = (GEOSGeom) self;
        return (GeosGeometry*) GEOSTopologyPreserveSimplify(geom, tolerance);
    }
SWIGINTERN bool GeosGeometry_relatePattern(GeosGeometry *self,GeosGeometry const *other,char const *pat){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSRelatePattern(geom, otherGeom, pat));
    }
SWIGINTERN bool GeosGeometry_disjoint(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSDisjoint(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_touches(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSTouches(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_intersects(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSIntersects(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_crosses(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSCrosses(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_within(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSWithin(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_contains(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSContains(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_overlaps(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSOverlaps(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_equals(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSEquals(geom, otherGeom));
    }
SWIGINTERN bool GeosGeometry_equalsExact(GeosGeometry *self,GeosGeometry const *other,double tolerance){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSEqualsExact(geom, otherGeom, tolerance));
    }
SWIGINTERN bool GeosGeometry_isEmpty(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return checkBoolResult(GEOSisEmpty(geom));
    }
SWIGINTERN bool GeosGeometry_isValid(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return checkBoolResult(GEOSisValid(geom));
    }
SWIGINTERN bool GeosGeometry_isSimple(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return checkBoolResult(GEOSisSimple(geom));
    }
SWIGINTERN bool GeosGeometry_isRing(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return checkBoolResult(GEOSisRing(geom));
    }
SWIGINTERN bool GeosGeometry_hasZ(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        return checkBoolResult(GEOSHasZ(geom));
    }
SWIGINTERN double GeosGeometry_area(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        double result;

        int code = GEOSArea(geom, &result);

        if (code == 0)
            throw std::runtime_error(message);

        return result;
    }
SWIGINTERN double GeosGeometry_length(GeosGeometry *self){
        GEOSGeom geom = (GEOSGeom) self;
        double result;

        int code = GEOSLength(geom, &result);

        if (code == 0)
            throw std::runtime_error(message);

        return result;
    }
SWIGINTERN double GeosGeometry_distance(GeosGeometry *self,GeosGeometry const *other){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        double result;

        int code = GEOSDistance(geom, otherGeom, &result);

        if (code == 0)
            throw std::runtime_error(message);

        return result;
    }
SWIGINTERN void delete_GeosPoint(GeosPoint *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosCoordinateSequence const *GeosPoint_getCoordSeq(GeosPoint *self){
        GEOSGeom geom = (GEOSGeom) self;
        const GEOSCoordSeq result = (const GEOSCoordSeq) GEOSGeom_getCoordSeq(geom);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosCoordinateSequence*) result;
    }
SWIGINTERN void delete_GeosLineString(GeosLineString *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosCoordinateSequence const *GeosLineString_getCoordSeq(GeosLineString *self){
        GEOSGeom geom = (GEOSGeom) self;
        const GEOSCoordSeq result = (const GEOSCoordSeq) GEOSGeom_getCoordSeq(geom);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosCoordinateSequence*) result;
    }
SWIGINTERN void delete_GeosLinearRing(GeosLinearRing *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosCoordinateSequence const *GeosLinearRing_getCoordSeq(GeosLinearRing *self){
        GEOSGeom geom = (GEOSGeom) self;
        const GEOSCoordSeq result = (const GEOSCoordSeq) GEOSGeom_getCoordSeq(geom);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosCoordinateSequence*) result;
    }
SWIGINTERN void delete_GeosPolygon(GeosPolygon *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosGeometry const *GeosPolygon_getExteriorRing(GeosPolygon *self){
        GEOSGeom geom = (GEOSGeom) self;
        const GEOSGeom result = (const GEOSGeom) GEOSGetExteriorRing(geom);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosGeometry*) result;
    }
SWIGINTERN size_t GeosPolygon_getNumInteriorRings(GeosPolygon *self){
        GEOSGeom geom = (GEOSGeom) self;
        size_t result = GEOSGetNumInteriorRings(geom);

        if ((int)result == -1)
            throw std::runtime_error(message);

        return result;
    }
SWIGINTERN GeosGeometry const *GeosPolygon_getInteriorRingN(GeosPolygon *self,size_t n){
        GEOSGeom geom = (GEOSGeom) self;

        size_t size = GEOSGetNumInteriorRings(geom);

        if (n < 0 || n >= size)
            throw std::runtime_error("Index out of bounds");

        const GEOSGeom result = (const GEOSGeom) GEOSGetInteriorRingN(geom, n);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosGeometry*) result;
    }
SWIGINTERN void delete_GeosGeometryCollection(GeosGeometryCollection *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN GeosGeometry const *GeosGeometryCollection_getGeometryN(GeosGeometryCollection *self,size_t n){
        GEOSGeom geom = (GEOSGeom) self;
        const GEOSGeom result = (const GEOSGeom) GEOSGetGeometryN(geom, n);

        if (result == NULL)
            throw std::runtime_error(message);

        return (const GeosGeometry*) result;
    }
SWIGINTERN void delete_GeosMultiPoint(GeosMultiPoint *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN void delete_GeosMultiLineString(GeosMultiLineString *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN void delete_GeosMultiLinearRing(GeosMultiLinearRing *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }
SWIGINTERN void delete_GeosMultiPolygon(GeosMultiPolygon *self){
        GEOSGeom geom = (GEOSGeom) self;
        GEOSGeom_destroy(geom);
    }

GeosGeometry *createPoint(GeosCoordinateSequence *s)
{
    GEOSCoordSeq coords = (GEOSCoordSeq) s;
    GEOSGeom geom = GEOSGeom_createPoint(coords);

    if(geom == NULL)
        throw std::runtime_error(message);

    return (GeosGeometry*) geom;
}

GeosGeometry *createLineString(GeosCoordinateSequence *s)
{
    GEOSCoordSeq coords = (GEOSCoordSeq) s;
    GEOSGeom geom = GEOSGeom_createLineString(coords);

    if(geom == NULL)
        throw std::runtime_error(message);

    return (GeosGeometry*) geom;
}

GeosGeometry *createLinearRing(GeosCoordinateSequence *s)
{
    GEOSCoordSeq coords = (GEOSCoordSeq) s;
    GEOSGeom geom = GEOSGeom_createLinearRing(coords);

    if(geom == NULL)
        throw std::runtime_error(message);

    return (GeosGeometry*) geom;
}

GeosGeometry *createPolygon(GeosLinearRing *shell, GeosLinearRing **holes, size_t nholes)
{
    GEOSGeom shellGeom = (GEOSGeom) shell;
    GEOSGeom* holeGeoms = (GEOSGeom*) holes;
    GEOSGeom geom = GEOSGeom_createPolygon(shellGeom, holeGeoms, nholes);

    if(geom == NULL)
        throw std::runtime_error(message);

    return (GeosGeometry*) geom;
}



typedef void GeosPreparedGeometry;

SWIGINTERN GeosPreparedGeometry *new_GeosPreparedGeometry(GeosGeometry const *source){
        const GEOSPreparedGeometry *prep = GEOSPrepare((const GEOSGeometry *)source);
        if(prep == NULL)
            throw std::runtime_error(message);
        return (GeosPreparedGeometry *) prep;
    }
SWIGINTERN void delete_GeosPreparedGeometry(GeosPreparedGeometry *self){
        GEOSPreparedGeometry *prep = (GEOSPreparedGeometry *) self;
        return GEOSPreparedGeom_destroy(prep);
    }
SWIGINTERN bool GeosPreparedGeometry_contains(GeosPreparedGeometry *self,GeosGeometry const *other){
        GEOSPreparedGeometry *prep = (GEOSPreparedGeometry *) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSPreparedContains(prep, otherGeom));
    }
SWIGINTERN bool GeosPreparedGeometry_containsProperly(GeosPreparedGeometry *self,GeosGeometry const *other){
        GEOSPreparedGeometry *prep = (GEOSPreparedGeometry *) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSPreparedContainsProperly(prep, otherGeom));
    }
SWIGINTERN bool GeosPreparedGeometry_covers(GeosPreparedGeometry *self,GeosGeometry const *other){
        GEOSPreparedGeometry *prep = (GEOSPreparedGeometry *) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSPreparedCovers(prep, otherGeom));
    }
SWIGINTERN bool GeosPreparedGeometry_intersects(GeosPreparedGeometry *self,GeosGeometry const *other){
        GEOSPreparedGeometry *prep = (GEOSPreparedGeometry *) self;
        GEOSGeom otherGeom = (GEOSGeom) other;
        return checkBoolResult(GEOSPreparedIntersects(prep, otherGeom));
    }

typedef void GeosSTRtree;
/* GeosIndexItem typedef'd here so it can be %typemap(typecheck)'d
   as a native object by each language specially */
typedef void *GeosIndexItem;
typedef GEOSQueryCallback GeosQueryCallback;

SWIGINTERN GeosSTRtree *new_GeosSTRtree(int nodeCapacity){
        GEOSSTRtree *tree = GEOSSTRtree_create(nodeCapacity);
        if(tree == NULL)
            throw std::runtime_error(message);
        return (GeosSTRtree *) tree;
    }
SWIGINTERN void delete_GeosSTRtree(GeosSTRtree *self){
        GEOSSTRtree *tree = (GEOSSTRtree *) self;
        return GEOSSTRtree_destroy(tree);
    }
SWIGINTERN void GeosSTRtree_insert(GeosSTRtree *self,GeosGeometry const *g,GeosIndexItem item){
        GEOSSTRtree *tree = (GEOSSTRtree *) self;
        const GEOSGeometry *geom = (const GEOSGeometry *) g;
        GEOSSTRtree_insert(tree, geom, item);
    }
SWIGINTERN void GeosSTRtree_remove(GeosSTRtree *self,GeosGeometry const *g,GeosIndexItem item){
        GEOSSTRtree *tree = (GEOSSTRtree *) self;
        const GEOSGeometry *geom = (const GEOSGeometry *) g;
        GEOSSTRtree_remove(tree, geom, item);
    }
SWIGINTERN void GeosSTRtree_query(GeosSTRtree *self,GeosGeometry const *g,GeosQueryCallback callback,GeosIndexItem accumulator){
        GEOSSTRtree *tree = (GEOSSTRtree *) self;
        const GEOSGeometry *geom = (const GEOSGeometry *) g;
        GEOSSTRtree_query(tree, geom, callback, accumulator);
    }
SWIGINTERN void GeosSTRtree_iterate(GeosSTRtree *self,GeosQueryCallback callback,GeosIndexItem accumulator){
        GEOSSTRtree *tree = (GEOSSTRtree *) self;
        GEOSSTRtree_iterate(tree, callback, accumulator);
    }
SWIGINTERN GeosWktReader *new_GeosWktReader(){
        return GEOSWKTReader_create();
    }
SWIGINTERN void delete_GeosWktReader(GeosWktReader *self){
        GEOSWKTReader *reader = (GEOSWKTReader*) self;
        GEOSWKTReader_destroy(reader);
    }
SWIGINTERN GeosGeometry *GeosWktReader_read(GeosWktReader *self,char const *wkt){
        if(wkt == NULL)
            throw std::runtime_error("Trying to create geometry from a NULL string");
            
        GEOSWKTReader *reader = (GEOSWKTReader*) self;
        GEOSGeometry *geom = GEOSWKTReader_read(reader, wkt);

        if(geom == NULL)
            throw std::runtime_error(message);

        return (GeosGeometry*) geom;
    }
SWIGINTERN GeosWktWriter *new_GeosWktWriter(){
        return GEOSWKTWriter_create();
    }
SWIGINTERN void delete_GeosWktWriter(GeosWktWriter *self){
        GEOSWKTWriter *writer = (GEOSWKTWriter*) self;
        GEOSWKTWriter_destroy(writer);
    }
SWIGINTERN char *GeosWktWriter_write(GeosWktWriter *self,GeosGeometry const *g){
        GEOSWKTWriter *writer = (GEOSWKTWriter*) self;
        GEOSGeom geom = (GEOSGeom) g;
        return GEOSWKTWriter_write(writer, geom);
    }
SWIGINTERN GeosWkbReader *new_GeosWkbReader(){
        return GEOSWKBReader_create();
    }
SWIGINTERN void delete_GeosWkbReader(GeosWkbReader *self){
        GEOSWKBReader *reader = (GEOSWKBReader*) self;
        GEOSWKBReader_destroy(reader);
    }
SWIGINTERN GeosGeometry *GeosWkbReader_read(GeosWkbReader *self,unsigned char const *wkb,size_t size){
        if(wkb == NULL)
          throw std::runtime_error("Trying to create geometry from a NULL string");
         
        GEOSWKBReader *reader = (GEOSWKBReader*) self;
        GEOSGeometry *geom = GEOSWKBReader_read(reader, wkb, size);
       
        if(geom == NULL)
          throw std::runtime_error(message);

        return (GeosGeometry*) geom;
    }
SWIGINTERN GeosGeometry *GeosWkbReader_readHEX(GeosWkbReader *self,unsigned char const *wkb,size_t size){
        if(wkb == NULL)
          throw std::runtime_error("Trying to create geometry from a NULL string");
         
        GEOSWKBReader *reader = (GEOSWKBReader*) self;
        GEOSGeometry *geom = GEOSWKBReader_readHEX(reader, wkb, size);
       
        if(geom == NULL)
          throw std::runtime_error(message);

        return (GeosGeometry*) geom;
    }
SWIGINTERN GeosWkbWriter *new_GeosWkbWriter(){
        return GEOSWKBWriter_create();
    }
SWIGINTERN void delete_GeosWkbWriter(GeosWkbWriter *self){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        GEOSWKBWriter_destroy(writer);
    }
SWIGINTERN int GeosWkbWriter_getOutputDimension(GeosWkbWriter *self){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        return GEOSWKBWriter_getOutputDimension(writer);
    }
SWIGINTERN void GeosWkbWriter_setOutputDimension(GeosWkbWriter *self,int newDimension){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        GEOSWKBWriter_setOutputDimension(writer, newDimension);
    }
SWIGINTERN int GeosWkbWriter_getByteOrder(GeosWkbWriter *self){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        return GEOSWKBWriter_getByteOrder(writer);
    }
SWIGINTERN void GeosWkbWriter_setByteOrder(GeosWkbWriter *self,int newByteOrder){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        return GEOSWKBWriter_setByteOrder(writer, newByteOrder);
    }
SWIGINTERN bool GeosWkbWriter_getIncludeSRID(GeosWkbWriter *self){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        return GEOSWKBWriter_getIncludeSRID(writer);
    }
SWIGINTERN void GeosWkbWriter_setIncludeSRID(GeosWkbWriter *self,bool newIncludeSRID){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        return GEOSWKBWriter_setIncludeSRID(writer, newIncludeSRID);
    }
SWIGINTERN unsigned char *GeosWkbWriter_write(GeosWkbWriter *self,GeosGeometry const *g,size_t *size){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        GEOSGeom geom = (GEOSGeom) g;
        return GEOSWKBWriter_write(writer, geom, size);
    }
SWIGINTERN unsigned char *GeosWkbWriter_writeHEX(GeosWkbWriter *self,GeosGeometry const *g,size_t *size){
        GEOSWKBWriter *writer = (GEOSWKBWriter*) self;
        GEOSGeom geom = (GEOSGeom) g;
        return GEOSWKBWriter_writeHEX(writer, geom, size);
    }

GeosGeometry *createEmptyPoint()
{
    GEOSGeom geom = GEOSGeom_createEmptyPoint();

    if(geom == NULL)
        throw std::runtime_error(message);

    return (GeosGeometry*) geom;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_version(lua_State* L) {
  int SWIG_arg = 0;
  char *result = 0 ;
  
  SWIG_check_num_args("GEOSversion",0,0)
  result = (char *)GEOSversion();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CoordinateSequence(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  GeosCoordinateSequence *result = 0 ;
  
  SWIG_check_num_args("GeosCoordinateSequence::GeosCoordinateSequence",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("GeosCoordinateSequence::GeosCoordinateSequence",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::GeosCoordinateSequence",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (GeosCoordinateSequence *)new_GeosCoordinateSequence(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosCoordinateSequence,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_clone(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  GeosCoordinateSequence *result = 0 ;
  
  SWIG_check_num_args("GeosCoordinateSequence::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::clone",1,"GeosCoordinateSequence *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_clone",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (GeosCoordinateSequence *)GeosCoordinateSequence_clone(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosCoordinateSequence,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_setX(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::setX",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::setX",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::setX",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosCoordinateSequence::setX",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_setX",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      result = (int)GeosCoordinateSequence_setX(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_setY(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::setY",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::setY",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::setY",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosCoordinateSequence::setY",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_setY",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      result = (int)GeosCoordinateSequence_setY(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_setZ(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double arg3 ;
  int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::setZ",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::setZ",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::setZ",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosCoordinateSequence::setZ",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_setZ",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      result = (int)GeosCoordinateSequence_setZ(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_setOrdinate(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::setOrdinate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::setOrdinate",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::setOrdinate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosCoordinateSequence::setOrdinate",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("GeosCoordinateSequence::setOrdinate",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_setOrdinate",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  {
    try
    {
      result = (int)GeosCoordinateSequence_setOrdinate(arg1,arg2,arg3,arg4);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getX(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getX",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::getX",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getX",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (double)GeosCoordinateSequence_getX(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getY(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getY",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::getY",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getY",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (double)GeosCoordinateSequence_getY(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getZ(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getZ",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::getZ",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getZ",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (double)GeosCoordinateSequence_getZ(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getOrdinate(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getOrdinate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getOrdinate",1,"GeosCoordinateSequence *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosCoordinateSequence::getOrdinate",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosCoordinateSequence::getOrdinate",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getOrdinate",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  {
    try
    {
      result = (double)GeosCoordinateSequence_getOrdinate(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getSize(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getSize",1,"GeosCoordinateSequence *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getSize",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (unsigned int)GeosCoordinateSequence_getSize(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CoordinateSequence_getDimensions(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("GeosCoordinateSequence::getDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosCoordinateSequence::getDimensions",1,"GeosCoordinateSequence *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,0))){
    SWIG_fail_ptr("CoordinateSequence_getDimensions",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (unsigned int)GeosCoordinateSequence_getDimensions(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CoordinateSequence(void *obj) {
GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) obj;
delete_GeosCoordinateSequence(arg1);
}
static swig_lua_method swig_GeosCoordinateSequence_methods[] = {
    {"clone", _wrap_CoordinateSequence_clone}, 
    {"setX", _wrap_CoordinateSequence_setX}, 
    {"setY", _wrap_CoordinateSequence_setY}, 
    {"setZ", _wrap_CoordinateSequence_setZ}, 
    {"setOrdinate", _wrap_CoordinateSequence_setOrdinate}, 
    {"getX", _wrap_CoordinateSequence_getX}, 
    {"getY", _wrap_CoordinateSequence_getY}, 
    {"getZ", _wrap_CoordinateSequence_getZ}, 
    {"getOrdinate", _wrap_CoordinateSequence_getOrdinate}, 
    {"getSize", _wrap_CoordinateSequence_getSize}, 
    {"getDimensions", _wrap_CoordinateSequence_getDimensions}, 
    {0,0}
};
static swig_lua_attribute swig_GeosCoordinateSequence_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosCoordinateSequence_bases[] = {0};
static const char *swig_GeosCoordinateSequence_base_names[] = {0};
static swig_lua_class _wrap_class_GeosCoordinateSequence = { "CoordinateSequence", &SWIGTYPE_p_GeosCoordinateSequence,_wrap_new_CoordinateSequence, swig_delete_CoordinateSequence, swig_GeosCoordinateSequence_methods, swig_GeosCoordinateSequence_attributes, swig_GeosCoordinateSequence_bases, swig_GeosCoordinateSequence_base_names };

static int _wrap_Geometry_clone(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::clone",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_clone",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_clone(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_geomType(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::geomType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::geomType",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_geomType",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (char *)GeosGeometry_geomType(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_typeId(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  int result;
  
  SWIG_check_num_args("GeosGeometry::typeId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::typeId",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_typeId",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (int)GeosGeometry_typeId(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_normalize(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  
  SWIG_check_num_args("GeosGeometry::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::normalize",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_normalize",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      GeosGeometry_normalize(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getSRID(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  int result;
  
  SWIG_check_num_args("GeosGeometry::getSRID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::getSRID",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_getSRID",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (int)GeosGeometry_getSRID(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_setSRID(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("GeosGeometry::setSRID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::setSRID",1,"GeosGeometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosGeometry::setSRID",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_setSRID",1,SWIGTYPE_p_GeosGeometry);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    try
    {
      GeosGeometry_setSRID(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getDimensions(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  size_t result;
  
  SWIG_check_num_args("GeosGeometry::getDimensions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::getDimensions",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_getDimensions",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = GeosGeometry_getDimensions(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getNumGeometries(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  size_t result;
  
  SWIG_check_num_args("GeosGeometry::getNumGeometries",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::getNumGeometries",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_getNumGeometries",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = GeosGeometry_getNumGeometries(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_intersection(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::intersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::intersection",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::intersection",2,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_intersection",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_intersection",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_intersection(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_buffer(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  double arg2 ;
  int arg3 ;
  GeosGeometry *result = 0 ;
  
  {
    arg3 = DEFAULT_QUADRANT_SEGMENTS;
  }
  SWIG_check_num_args("GeosGeometry::buffer",2,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::buffer",1,"GeosGeometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosGeometry::buffer",2,"double");
  if(lua_gettop(L)>=3 && !lua_isnumber(L,3)) SWIG_fail_arg("GeosGeometry::buffer",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_buffer",1,SWIGTYPE_p_GeosGeometry);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if(lua_gettop(L)>=3){
    arg3 = (int)lua_tonumber(L, 3);
  }
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_buffer(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_convexHull(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::convexHull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::convexHull",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_convexHull",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_convexHull(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_difference(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::difference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::difference",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::difference",2,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_difference",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_difference",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_difference(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_symDifference(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::symDifference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::symDifference",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::symDifference",2,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_symDifference",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_symDifference",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_symDifference(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_boundary(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::boundary",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::boundary",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_boundary",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_boundary(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_union(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::geomUnion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::geomUnion",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::geomUnion",2,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_union",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_union",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_geomUnion(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_pointOnSurface(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::pointOnSurface",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::pointOnSurface",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_pointOnSurface",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_pointOnSurface(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getCentroid(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::getCentroid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::getCentroid",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_getCentroid",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_getCentroid(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getEnvelope(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::getEnvelope",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::getEnvelope",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_getEnvelope",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_getEnvelope(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 0);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 0);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 0);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 0);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 0);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 0);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 0);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 0);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_relate(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::relate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::relate",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::relate",2,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_relate",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_relate",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (char *)GeosGeometry_relate(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  delete [] result;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_lineMerge(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::lineMerge",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::lineMerge",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_lineMerge",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_lineMerge(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_simplify(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  double arg2 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::simplify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::simplify",1,"GeosGeometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosGeometry::simplify",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_simplify",1,SWIGTYPE_p_GeosGeometry);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_simplify(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_topologyPreserveSimplify(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  double arg2 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometry::topologyPreserveSimplify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::topologyPreserveSimplify",1,"GeosGeometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosGeometry::topologyPreserveSimplify",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_topologyPreserveSimplify",1,SWIGTYPE_p_GeosGeometry);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  {
    try
    {
      result = (GeosGeometry *)GeosGeometry_topologyPreserveSimplify(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_relatePattern(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::relatePattern",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::relatePattern",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::relatePattern",2,"GeosGeometry const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("GeosGeometry::relatePattern",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_relatePattern",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_relatePattern",2,SWIGTYPE_p_GeosGeometry);
  }
  
  arg3 = (char *)lua_tostring(L, 3);
  {
    try
    {
      result = (bool)GeosGeometry_relatePattern(arg1,(GeosGeometry const *)arg2,(char const *)arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_disjoint(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::disjoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::disjoint",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::disjoint",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_disjoint",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_disjoint",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_disjoint(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_touches(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::touches",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::touches",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::touches",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_touches",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_touches",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_touches(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_intersects(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::intersects",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::intersects",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_intersects",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_intersects",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_intersects(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_crosses(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::crosses",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::crosses",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::crosses",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_crosses",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_crosses",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_crosses(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_within(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::within",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::within",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::within",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_within",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_within",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_within(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_contains(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::contains",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::contains",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_contains",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_contains",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_contains(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_overlaps(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::overlaps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::overlaps",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::overlaps",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_overlaps",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_overlaps",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_overlaps(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_equals(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::equals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::equals",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::equals",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_equals",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_equals",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_equals(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_equalsExact(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::equalsExact",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::equalsExact",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::equalsExact",2,"GeosGeometry const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("GeosGeometry::equalsExact",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_equalsExact",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_equalsExact",2,SWIGTYPE_p_GeosGeometry);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  {
    try
    {
      result = (bool)GeosGeometry_equalsExact(arg1,(GeosGeometry const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::isEmpty",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_isEmpty",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_isEmpty(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_isValid(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::isValid",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_isValid",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_isValid(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_isSimple(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::isSimple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::isSimple",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_isSimple",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_isSimple(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_isRing(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::isRing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::isRing",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_isRing",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_isRing(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_hasZ(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosGeometry::hasZ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::hasZ",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_hasZ",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosGeometry_hasZ(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_area(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  double result;
  
  SWIG_check_num_args("GeosGeometry::area",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::area",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_area",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (double)GeosGeometry_area(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_length(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  double result;
  
  SWIG_check_num_args("GeosGeometry::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::length",1,"GeosGeometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_length",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (double)GeosGeometry_length(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_distance(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  double result;
  
  SWIG_check_num_args("GeosGeometry::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometry::distance",1,"GeosGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosGeometry::distance",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_distance",1,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Geometry_distance",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (double)GeosGeometry_distance(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Geometry(void *obj) {
GeosGeometry *arg1 = (GeosGeometry *) obj;
delete_GeosGeometry(arg1);
}
static swig_lua_method swig_GeosGeometry_methods[] = {
    {"clone", _wrap_Geometry_clone}, 
    {"geomType", _wrap_Geometry_geomType}, 
    {"typeId", _wrap_Geometry_typeId}, 
    {"normalize", _wrap_Geometry_normalize}, 
    {"getSRID", _wrap_Geometry_getSRID}, 
    {"setSRID", _wrap_Geometry_setSRID}, 
    {"getDimensions", _wrap_Geometry_getDimensions}, 
    {"getNumGeometries", _wrap_Geometry_getNumGeometries}, 
    {"intersection", _wrap_Geometry_intersection}, 
    {"buffer", _wrap_Geometry_buffer}, 
    {"convexHull", _wrap_Geometry_convexHull}, 
    {"difference", _wrap_Geometry_difference}, 
    {"symDifference", _wrap_Geometry_symDifference}, 
    {"boundary", _wrap_Geometry_boundary}, 
    {"union", _wrap_Geometry_union}, 
    {"pointOnSurface", _wrap_Geometry_pointOnSurface}, 
    {"getCentroid", _wrap_Geometry_getCentroid}, 
    {"getEnvelope", _wrap_Geometry_getEnvelope}, 
    {"relate", _wrap_Geometry_relate}, 
    {"lineMerge", _wrap_Geometry_lineMerge}, 
    {"simplify", _wrap_Geometry_simplify}, 
    {"topologyPreserveSimplify", _wrap_Geometry_topologyPreserveSimplify}, 
    {"relatePattern", _wrap_Geometry_relatePattern}, 
    {"disjoint", _wrap_Geometry_disjoint}, 
    {"touches", _wrap_Geometry_touches}, 
    {"intersects", _wrap_Geometry_intersects}, 
    {"crosses", _wrap_Geometry_crosses}, 
    {"within", _wrap_Geometry_within}, 
    {"contains", _wrap_Geometry_contains}, 
    {"overlaps", _wrap_Geometry_overlaps}, 
    {"equals", _wrap_Geometry_equals}, 
    {"equalsExact", _wrap_Geometry_equalsExact}, 
    {"isEmpty", _wrap_Geometry_isEmpty}, 
    {"isValid", _wrap_Geometry_isValid}, 
    {"isSimple", _wrap_Geometry_isSimple}, 
    {"isRing", _wrap_Geometry_isRing}, 
    {"hasZ", _wrap_Geometry_hasZ}, 
    {"area", _wrap_Geometry_area}, 
    {"length", _wrap_Geometry_length}, 
    {"distance", _wrap_Geometry_distance}, 
    {0,0}
};
static swig_lua_attribute swig_GeosGeometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosGeometry_bases[] = {0};
static const char *swig_GeosGeometry_base_names[] = {0};
static swig_lua_class _wrap_class_GeosGeometry = { "Geometry", &SWIGTYPE_p_GeosGeometry,0, swig_delete_Geometry, swig_GeosGeometry_methods, swig_GeosGeometry_attributes, swig_GeosGeometry_bases, swig_GeosGeometry_base_names };

static int _wrap_Point_getCoordSeq(lua_State* L) {
  int SWIG_arg = 0;
  GeosPoint *arg1 = (GeosPoint *) 0 ;
  GeosCoordinateSequence *result = 0 ;
  
  SWIG_check_num_args("GeosPoint::getCoordSeq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPoint::getCoordSeq",1,"GeosPoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPoint,0))){
    SWIG_fail_ptr("Point_getCoordSeq",1,SWIGTYPE_p_GeosPoint);
  }
  
  {
    try
    {
      result = (GeosCoordinateSequence *)GeosPoint_getCoordSeq(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosCoordinateSequence,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Point(void *obj) {
GeosPoint *arg1 = (GeosPoint *) obj;
delete_GeosPoint(arg1);
}
static swig_lua_method swig_GeosPoint_methods[] = {
    {"getCoordSeq", _wrap_Point_getCoordSeq}, 
    {0,0}
};
static swig_lua_attribute swig_GeosPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosPoint_bases[] = {0,0};
static const char *swig_GeosPoint_base_names[] = {"GeosGeometry *",0};
static swig_lua_class _wrap_class_GeosPoint = { "Point", &SWIGTYPE_p_GeosPoint,0, swig_delete_Point, swig_GeosPoint_methods, swig_GeosPoint_attributes, swig_GeosPoint_bases, swig_GeosPoint_base_names };

static int _wrap_LineString_getCoordSeq(lua_State* L) {
  int SWIG_arg = 0;
  GeosLineString *arg1 = (GeosLineString *) 0 ;
  GeosCoordinateSequence *result = 0 ;
  
  SWIG_check_num_args("GeosLineString::getCoordSeq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosLineString::getCoordSeq",1,"GeosLineString *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosLineString,0))){
    SWIG_fail_ptr("LineString_getCoordSeq",1,SWIGTYPE_p_GeosLineString);
  }
  
  {
    try
    {
      result = (GeosCoordinateSequence *)GeosLineString_getCoordSeq(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosCoordinateSequence,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LineString(void *obj) {
GeosLineString *arg1 = (GeosLineString *) obj;
delete_GeosLineString(arg1);
}
static swig_lua_method swig_GeosLineString_methods[] = {
    {"getCoordSeq", _wrap_LineString_getCoordSeq}, 
    {0,0}
};
static swig_lua_attribute swig_GeosLineString_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosLineString_bases[] = {0,0};
static const char *swig_GeosLineString_base_names[] = {"GeosGeometry *",0};
static swig_lua_class _wrap_class_GeosLineString = { "LineString", &SWIGTYPE_p_GeosLineString,0, swig_delete_LineString, swig_GeosLineString_methods, swig_GeosLineString_attributes, swig_GeosLineString_bases, swig_GeosLineString_base_names };

static int _wrap_LinearRing_getCoordSeq(lua_State* L) {
  int SWIG_arg = 0;
  GeosLinearRing *arg1 = (GeosLinearRing *) 0 ;
  GeosCoordinateSequence *result = 0 ;
  
  SWIG_check_num_args("GeosLinearRing::getCoordSeq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosLinearRing::getCoordSeq",1,"GeosLinearRing *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosLinearRing,0))){
    SWIG_fail_ptr("LinearRing_getCoordSeq",1,SWIGTYPE_p_GeosLinearRing);
  }
  
  {
    try
    {
      result = (GeosCoordinateSequence *)GeosLinearRing_getCoordSeq(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosCoordinateSequence,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LinearRing(void *obj) {
GeosLinearRing *arg1 = (GeosLinearRing *) obj;
delete_GeosLinearRing(arg1);
}
static swig_lua_method swig_GeosLinearRing_methods[] = {
    {"getCoordSeq", _wrap_LinearRing_getCoordSeq}, 
    {0,0}
};
static swig_lua_attribute swig_GeosLinearRing_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosLinearRing_bases[] = {0,0};
static const char *swig_GeosLinearRing_base_names[] = {"GeosGeometry *",0};
static swig_lua_class _wrap_class_GeosLinearRing = { "LinearRing", &SWIGTYPE_p_GeosLinearRing,0, swig_delete_LinearRing, swig_GeosLinearRing_methods, swig_GeosLinearRing_attributes, swig_GeosLinearRing_bases, swig_GeosLinearRing_base_names };

static int _wrap_Polygon_getExteriorRing(lua_State* L) {
  int SWIG_arg = 0;
  GeosPolygon *arg1 = (GeosPolygon *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosPolygon::getExteriorRing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPolygon::getExteriorRing",1,"GeosPolygon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPolygon,0))){
    SWIG_fail_ptr("Polygon_getExteriorRing",1,SWIGTYPE_p_GeosPolygon);
  }
  
  {
    try
    {
      result = (GeosGeometry *)GeosPolygon_getExteriorRing(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 0);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 0);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 0);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 0);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 0);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 0);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 0);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 0);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Polygon_getNumInteriorRings(lua_State* L) {
  int SWIG_arg = 0;
  GeosPolygon *arg1 = (GeosPolygon *) 0 ;
  size_t result;
  
  SWIG_check_num_args("GeosPolygon::getNumInteriorRings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPolygon::getNumInteriorRings",1,"GeosPolygon *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPolygon,0))){
    SWIG_fail_ptr("Polygon_getNumInteriorRings",1,SWIGTYPE_p_GeosPolygon);
  }
  
  {
    try
    {
      result = GeosPolygon_getNumInteriorRings(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Polygon_getInteriorRingN(lua_State* L) {
  int SWIG_arg = 0;
  GeosPolygon *arg1 = (GeosPolygon *) 0 ;
  size_t arg2 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosPolygon::getInteriorRingN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPolygon::getInteriorRingN",1,"GeosPolygon *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosPolygon::getInteriorRingN",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPolygon,0))){
    SWIG_fail_ptr("Polygon_getInteriorRingN",1,SWIGTYPE_p_GeosPolygon);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (GeosGeometry *)GeosPolygon_getInteriorRingN(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 0);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 0);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 0);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 0);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 0);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 0);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 0);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 0);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Polygon(void *obj) {
GeosPolygon *arg1 = (GeosPolygon *) obj;
delete_GeosPolygon(arg1);
}
static swig_lua_method swig_GeosPolygon_methods[] = {
    {"getExteriorRing", _wrap_Polygon_getExteriorRing}, 
    {"getNumInteriorRings", _wrap_Polygon_getNumInteriorRings}, 
    {"getInteriorRingN", _wrap_Polygon_getInteriorRingN}, 
    {0,0}
};
static swig_lua_attribute swig_GeosPolygon_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosPolygon_bases[] = {0,0};
static const char *swig_GeosPolygon_base_names[] = {"GeosGeometry *",0};
static swig_lua_class _wrap_class_GeosPolygon = { "Polygon", &SWIGTYPE_p_GeosPolygon,0, swig_delete_Polygon, swig_GeosPolygon_methods, swig_GeosPolygon_attributes, swig_GeosPolygon_bases, swig_GeosPolygon_base_names };

static int _wrap_GeometryCollection_getGeometryN(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometryCollection *arg1 = (GeosGeometryCollection *) 0 ;
  size_t arg2 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosGeometryCollection::getGeometryN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosGeometryCollection::getGeometryN",1,"GeosGeometryCollection *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosGeometryCollection::getGeometryN",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometryCollection,0))){
    SWIG_fail_ptr("GeometryCollection_getGeometryN",1,SWIGTYPE_p_GeosGeometryCollection);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  {
    try
    {
      result = (GeosGeometry *)GeosGeometryCollection_getGeometryN(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 0);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 0);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 0);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 0);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 0);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 0);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 0);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 0);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GeometryCollection(void *obj) {
GeosGeometryCollection *arg1 = (GeosGeometryCollection *) obj;
delete_GeosGeometryCollection(arg1);
}
static swig_lua_method swig_GeosGeometryCollection_methods[] = {
    {"getGeometryN", _wrap_GeometryCollection_getGeometryN}, 
    {0,0}
};
static swig_lua_attribute swig_GeosGeometryCollection_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosGeometryCollection_bases[] = {0,0};
static const char *swig_GeosGeometryCollection_base_names[] = {"GeosGeometry *",0};
static swig_lua_class _wrap_class_GeosGeometryCollection = { "GeometryCollection", &SWIGTYPE_p_GeosGeometryCollection,0, swig_delete_GeometryCollection, swig_GeosGeometryCollection_methods, swig_GeosGeometryCollection_attributes, swig_GeosGeometryCollection_bases, swig_GeosGeometryCollection_base_names };

static void swig_delete_MultiPoint(void *obj) {
GeosMultiPoint *arg1 = (GeosMultiPoint *) obj;
delete_GeosMultiPoint(arg1);
}
static swig_lua_method swig_GeosMultiPoint_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GeosMultiPoint_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosMultiPoint_bases[] = {0,0};
static const char *swig_GeosMultiPoint_base_names[] = {"GeosGeometryCollection *",0};
static swig_lua_class _wrap_class_GeosMultiPoint = { "MultiPoint", &SWIGTYPE_p_GeosMultiPoint,0, swig_delete_MultiPoint, swig_GeosMultiPoint_methods, swig_GeosMultiPoint_attributes, swig_GeosMultiPoint_bases, swig_GeosMultiPoint_base_names };

static void swig_delete_MultiLineString(void *obj) {
GeosMultiLineString *arg1 = (GeosMultiLineString *) obj;
delete_GeosMultiLineString(arg1);
}
static swig_lua_method swig_GeosMultiLineString_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GeosMultiLineString_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosMultiLineString_bases[] = {0,0};
static const char *swig_GeosMultiLineString_base_names[] = {"GeosGeometryCollection *",0};
static swig_lua_class _wrap_class_GeosMultiLineString = { "MultiLineString", &SWIGTYPE_p_GeosMultiLineString,0, swig_delete_MultiLineString, swig_GeosMultiLineString_methods, swig_GeosMultiLineString_attributes, swig_GeosMultiLineString_bases, swig_GeosMultiLineString_base_names };

static void swig_delete_MultiLinearRing(void *obj) {
GeosMultiLinearRing *arg1 = (GeosMultiLinearRing *) obj;
delete_GeosMultiLinearRing(arg1);
}
static swig_lua_method swig_GeosMultiLinearRing_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GeosMultiLinearRing_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosMultiLinearRing_bases[] = {0,0};
static const char *swig_GeosMultiLinearRing_base_names[] = {"GeosGeometryCollection *",0};
static swig_lua_class _wrap_class_GeosMultiLinearRing = { "MultiLinearRing", &SWIGTYPE_p_GeosMultiLinearRing,0, swig_delete_MultiLinearRing, swig_GeosMultiLinearRing_methods, swig_GeosMultiLinearRing_attributes, swig_GeosMultiLinearRing_bases, swig_GeosMultiLinearRing_base_names };

static void swig_delete_MultiPolygon(void *obj) {
GeosMultiPolygon *arg1 = (GeosMultiPolygon *) obj;
delete_GeosMultiPolygon(arg1);
}
static swig_lua_method swig_GeosMultiPolygon_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_GeosMultiPolygon_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosMultiPolygon_bases[] = {0,0};
static const char *swig_GeosMultiPolygon_base_names[] = {"GeosGeometryCollection *",0};
static swig_lua_class _wrap_class_GeosMultiPolygon = { "MultiPolygon", &SWIGTYPE_p_GeosMultiPolygon,0, swig_delete_MultiPolygon, swig_GeosMultiPolygon_methods, swig_GeosMultiPolygon_attributes, swig_GeosMultiPolygon_bases, swig_GeosMultiPolygon_base_names };

static int _wrap_createPoint(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("createPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createPoint",1,"GeosCoordinateSequence *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("createPoint",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (GeosGeometry *)createPoint(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createLineString(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("createLineString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createLineString",1,"GeosCoordinateSequence *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("createLineString",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (GeosGeometry *)createLineString(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createLinearRing(lua_State* L) {
  int SWIG_arg = 0;
  GeosCoordinateSequence *arg1 = (GeosCoordinateSequence *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("createLinearRing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createLinearRing",1,"GeosCoordinateSequence *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosCoordinateSequence,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("createLinearRing",1,SWIGTYPE_p_GeosCoordinateSequence);
  }
  
  {
    try
    {
      result = (GeosGeometry *)createLinearRing(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_createPolygon(lua_State* L) {
  int SWIG_arg = 0;
  GeosLinearRing *arg1 = (GeosLinearRing *) 0 ;
  GeosLinearRing **arg2 = (GeosLinearRing **) 0 ;
  size_t arg3 ;
  GeosGeometry *result = 0 ;
  
  {
    arg2 = NULL;
    arg3 = 0;
  }
  SWIG_check_num_args("createPolygon",1,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createPolygon",1,"GeosLinearRing *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosLinearRing,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("createPolygon",1,SWIGTYPE_p_GeosLinearRing);
  }
  
  if(lua_gettop(L)>=2){
    {
      if (!lua_toboolean(L,-1))
      {
        arg2 = NULL;
        arg3 = 0;
      }
      else
      {
        /* Make sure the input can be treated as an table. */
        luaL_checktype(L, -1, LUA_TTABLE);
        arg3 = lua_objlen(L, -1);
        /* Allocate space for the C array. */
        arg2 = (GeosLinearRing**) malloc(arg3*sizeof(GeosLinearRing*));
        for(size_t i = 0; i < arg3; i++)
        {
          lua_rawgeti(L, -1, i+1); // key=1..len
          /* Get the underlying pointer and give up ownership of it. */
          GeosLinearRing *ring = NULL;
          int convertResult = SWIG_ConvertPtr(L, -1, (void**)&ring, SWIGTYPE_p_GeosLinearRing, SWIG_POINTER_DISOWN);
          if (!SWIG_IsOK(convertResult)) {
            lua_pushstring(L,SWIG_ArgError(convertResult));
            SWIG_fail;
          }
          /* Put the pointer in the array */
          arg2[i] = ring;
        }    
      }
    }
  }
  {
    try
    {
      result = (GeosGeometry *)createPolygon(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  {
    if (arg2) {
      free((void*) arg2);
    }
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    if (arg2) {
      free((void*) arg2);
    }
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Prepared(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *arg1 = (GeosGeometry *) 0 ;
  GeosPreparedGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosPreparedGeometry::GeosPreparedGeometry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPreparedGeometry::GeosPreparedGeometry",1,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("new_Prepared",1,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (GeosPreparedGeometry *)new_GeosPreparedGeometry((GeosGeometry const *)arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosPreparedGeometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Prepared_contains(lua_State* L) {
  int SWIG_arg = 0;
  GeosPreparedGeometry *arg1 = (GeosPreparedGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosPreparedGeometry::contains",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPreparedGeometry::contains",1,"GeosPreparedGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosPreparedGeometry::contains",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPreparedGeometry,0))){
    SWIG_fail_ptr("Prepared_contains",1,SWIGTYPE_p_GeosPreparedGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Prepared_contains",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosPreparedGeometry_contains(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Prepared_containsProperly(lua_State* L) {
  int SWIG_arg = 0;
  GeosPreparedGeometry *arg1 = (GeosPreparedGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosPreparedGeometry::containsProperly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPreparedGeometry::containsProperly",1,"GeosPreparedGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosPreparedGeometry::containsProperly",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPreparedGeometry,0))){
    SWIG_fail_ptr("Prepared_containsProperly",1,SWIGTYPE_p_GeosPreparedGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Prepared_containsProperly",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosPreparedGeometry_containsProperly(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Prepared_covers(lua_State* L) {
  int SWIG_arg = 0;
  GeosPreparedGeometry *arg1 = (GeosPreparedGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosPreparedGeometry::covers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPreparedGeometry::covers",1,"GeosPreparedGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosPreparedGeometry::covers",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPreparedGeometry,0))){
    SWIG_fail_ptr("Prepared_covers",1,SWIGTYPE_p_GeosPreparedGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Prepared_covers",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosPreparedGeometry_covers(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Prepared_intersects(lua_State* L) {
  int SWIG_arg = 0;
  GeosPreparedGeometry *arg1 = (GeosPreparedGeometry *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosPreparedGeometry::intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosPreparedGeometry::intersects",1,"GeosPreparedGeometry *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosPreparedGeometry::intersects",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosPreparedGeometry,0))){
    SWIG_fail_ptr("Prepared_intersects",1,SWIGTYPE_p_GeosPreparedGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("Prepared_intersects",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (bool)GeosPreparedGeometry_intersects(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Prepared(void *obj) {
GeosPreparedGeometry *arg1 = (GeosPreparedGeometry *) obj;
delete_GeosPreparedGeometry(arg1);
}
static swig_lua_method swig_GeosPreparedGeometry_methods[] = {
    {"contains", _wrap_Prepared_contains}, 
    {"containsProperly", _wrap_Prepared_containsProperly}, 
    {"covers", _wrap_Prepared_covers}, 
    {"intersects", _wrap_Prepared_intersects}, 
    {0,0}
};
static swig_lua_attribute swig_GeosPreparedGeometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosPreparedGeometry_bases[] = {0};
static const char *swig_GeosPreparedGeometry_base_names[] = {0};
static swig_lua_class _wrap_class_GeosPreparedGeometry = { "Prepared", &SWIGTYPE_p_GeosPreparedGeometry,_wrap_new_Prepared, swig_delete_Prepared, swig_GeosPreparedGeometry_methods, swig_GeosPreparedGeometry_attributes, swig_GeosPreparedGeometry_bases, swig_GeosPreparedGeometry_base_names };

static int _wrap_new_STRtree(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  GeosSTRtree *result = 0 ;
  
  {
    arg1 = 10;
  }
  SWIG_check_num_args("GeosSTRtree::GeosSTRtree",0,1)
  if(lua_gettop(L)>=1 && !lua_isnumber(L,1)) SWIG_fail_arg("GeosSTRtree::GeosSTRtree",1,"int");
  if(lua_gettop(L)>=1){
    arg1 = (int)lua_tonumber(L, 1);
  }
  {
    try
    {
      result = (GeosSTRtree *)new_GeosSTRtree(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosSTRtree,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STRtree_insert(lua_State* L) {
  int SWIG_arg = 0;
  GeosSTRtree *arg1 = (GeosSTRtree *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosIndexItem arg3 ;
  GeosIndexItem *argp3 ;
  
  SWIG_check_num_args("GeosSTRtree::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosSTRtree::insert",1,"GeosSTRtree *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosSTRtree::insert",2,"GeosGeometry const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GeosSTRtree::insert",3,"GeosIndexItem");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosSTRtree,0))){
    SWIG_fail_ptr("STRtree_insert",1,SWIGTYPE_p_GeosSTRtree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("STRtree_insert",2,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GeosIndexItem,0))){
    SWIG_fail_ptr("STRtree_insert",3,SWIGTYPE_p_GeosIndexItem);
  }
  arg3 = *argp3;
  
  {
    try
    {
      GeosSTRtree_insert(arg1,(GeosGeometry const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STRtree_remove(lua_State* L) {
  int SWIG_arg = 0;
  GeosSTRtree *arg1 = (GeosSTRtree *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosIndexItem arg3 ;
  GeosIndexItem *argp3 ;
  
  SWIG_check_num_args("GeosSTRtree::remove",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosSTRtree::remove",1,"GeosSTRtree *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosSTRtree::remove",2,"GeosGeometry const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GeosSTRtree::remove",3,"GeosIndexItem");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosSTRtree,0))){
    SWIG_fail_ptr("STRtree_remove",1,SWIGTYPE_p_GeosSTRtree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("STRtree_remove",2,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GeosIndexItem,0))){
    SWIG_fail_ptr("STRtree_remove",3,SWIGTYPE_p_GeosIndexItem);
  }
  arg3 = *argp3;
  
  {
    try
    {
      GeosSTRtree_remove(arg1,(GeosGeometry const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STRtree_query(lua_State* L) {
  int SWIG_arg = 0;
  GeosSTRtree *arg1 = (GeosSTRtree *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  GeosQueryCallback arg3 ;
  GeosIndexItem arg4 ;
  GeosQueryCallback *argp3 ;
  GeosIndexItem *argp4 ;
  
  SWIG_check_num_args("GeosSTRtree::query",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosSTRtree::query",1,"GeosSTRtree *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosSTRtree::query",2,"GeosGeometry const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GeosSTRtree::query",3,"GeosQueryCallback");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("GeosSTRtree::query",4,"GeosIndexItem");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosSTRtree,0))){
    SWIG_fail_ptr("STRtree_query",1,SWIGTYPE_p_GeosSTRtree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("STRtree_query",2,SWIGTYPE_p_GeosGeometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GeosQueryCallback,0))){
    SWIG_fail_ptr("STRtree_query",3,SWIGTYPE_p_GeosQueryCallback);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GeosIndexItem,0))){
    SWIG_fail_ptr("STRtree_query",4,SWIGTYPE_p_GeosIndexItem);
  }
  arg4 = *argp4;
  
  {
    try
    {
      GeosSTRtree_query(arg1,(GeosGeometry const *)arg2,arg3,arg4);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_STRtree_iterate(lua_State* L) {
  int SWIG_arg = 0;
  GeosSTRtree *arg1 = (GeosSTRtree *) 0 ;
  GeosQueryCallback arg2 ;
  GeosIndexItem arg3 ;
  GeosQueryCallback *argp2 ;
  GeosIndexItem *argp3 ;
  
  SWIG_check_num_args("GeosSTRtree::iterate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosSTRtree::iterate",1,"GeosSTRtree *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("GeosSTRtree::iterate",2,"GeosQueryCallback");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("GeosSTRtree::iterate",3,"GeosIndexItem");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosSTRtree,0))){
    SWIG_fail_ptr("STRtree_iterate",1,SWIGTYPE_p_GeosSTRtree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GeosQueryCallback,0))){
    SWIG_fail_ptr("STRtree_iterate",2,SWIGTYPE_p_GeosQueryCallback);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GeosIndexItem,0))){
    SWIG_fail_ptr("STRtree_iterate",3,SWIGTYPE_p_GeosIndexItem);
  }
  arg3 = *argp3;
  
  {
    try
    {
      GeosSTRtree_iterate(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_STRtree(void *obj) {
GeosSTRtree *arg1 = (GeosSTRtree *) obj;
delete_GeosSTRtree(arg1);
}
static swig_lua_method swig_GeosSTRtree_methods[] = {
    {"insert", _wrap_STRtree_insert}, 
    {"remove", _wrap_STRtree_remove}, 
    {"query", _wrap_STRtree_query}, 
    {"iterate", _wrap_STRtree_iterate}, 
    {0,0}
};
static swig_lua_attribute swig_GeosSTRtree_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosSTRtree_bases[] = {0};
static const char *swig_GeosSTRtree_base_names[] = {0};
static swig_lua_class _wrap_class_GeosSTRtree = { "STRtree", &SWIGTYPE_p_GeosSTRtree,_wrap_new_STRtree, swig_delete_STRtree, swig_GeosSTRtree_methods, swig_GeosSTRtree_attributes, swig_GeosSTRtree_bases, swig_GeosSTRtree_base_names };

static int _wrap_new_WktReader(lua_State* L) {
  int SWIG_arg = 0;
  GeosWktReader *result = 0 ;
  
  SWIG_check_num_args("GeosWktReader::GeosWktReader",0,0)
  {
    try
    {
      result = (GeosWktReader *)new_GeosWktReader();
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosWktReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WktReader_read(lua_State* L) {
  int SWIG_arg = 0;
  GeosWktReader *arg1 = (GeosWktReader *) 0 ;
  char *arg2 = (char *) 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosWktReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWktReader::read",1,"GeosWktReader *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("GeosWktReader::read",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWktReader,0))){
    SWIG_fail_ptr("WktReader_read",1,SWIGTYPE_p_GeosWktReader);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  {
    try
    {
      result = (GeosGeometry *)GeosWktReader_read(arg1,(char const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WktReader(void *obj) {
GeosWktReader *arg1 = (GeosWktReader *) obj;
delete_GeosWktReader(arg1);
}
static swig_lua_method swig_GeosWktReader_methods[] = {
    {"read", _wrap_WktReader_read}, 
    {0,0}
};
static swig_lua_attribute swig_GeosWktReader_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosWktReader_bases[] = {0};
static const char *swig_GeosWktReader_base_names[] = {0};
static swig_lua_class _wrap_class_GeosWktReader = { "WktReader", &SWIGTYPE_p_GeosWktReader,_wrap_new_WktReader, swig_delete_WktReader, swig_GeosWktReader_methods, swig_GeosWktReader_attributes, swig_GeosWktReader_bases, swig_GeosWktReader_base_names };

static int _wrap_new_WktWriter(lua_State* L) {
  int SWIG_arg = 0;
  GeosWktWriter *result = 0 ;
  
  SWIG_check_num_args("GeosWktWriter::GeosWktWriter",0,0)
  {
    try
    {
      result = (GeosWktWriter *)new_GeosWktWriter();
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosWktWriter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WktWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  GeosWktWriter *arg1 = (GeosWktWriter *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("GeosWktWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWktWriter::write",1,"GeosWktWriter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosWktWriter::write",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWktWriter,0))){
    SWIG_fail_ptr("WktWriter_write",1,SWIGTYPE_p_GeosWktWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("WktWriter_write",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (char *)GeosWktWriter_write(arg1,(GeosGeometry const *)arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WktWriter(void *obj) {
GeosWktWriter *arg1 = (GeosWktWriter *) obj;
delete_GeosWktWriter(arg1);
}
static swig_lua_method swig_GeosWktWriter_methods[] = {
    {"write", _wrap_WktWriter_write}, 
    {0,0}
};
static swig_lua_attribute swig_GeosWktWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosWktWriter_bases[] = {0};
static const char *swig_GeosWktWriter_base_names[] = {0};
static swig_lua_class _wrap_class_GeosWktWriter = { "WktWriter", &SWIGTYPE_p_GeosWktWriter,_wrap_new_WktWriter, swig_delete_WktWriter, swig_GeosWktWriter_methods, swig_GeosWktWriter_attributes, swig_GeosWktWriter_bases, swig_GeosWktWriter_base_names };

static int _wrap_new_WkbReader(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbReader *result = 0 ;
  
  SWIG_check_num_args("GeosWkbReader::GeosWkbReader",0,0)
  {
    try
    {
      result = (GeosWkbReader *)new_GeosWkbReader();
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosWkbReader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbReader_read(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbReader *arg1 = (GeosWkbReader *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  int alloc2 = 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosWkbReader::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbReader::read",1,"GeosWkbReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbReader,0))){
    SWIG_fail_ptr("WkbReader_read",1,SWIGTYPE_p_GeosWkbReader);
  }
  
  {
    /* %typemap(in) (const unsigned char* wkb, size_t size) (int alloc2 = 0) */
    arg2 = luaL_checkstring(L, 1);
    arg3 = luaL_checknumber(L, 2);
    if (!arg2 || arg3 == 0)
    SWIG_exception(SWIG_RuntimeError, "Expecting a string");
  }
  {
    try
    {
      result = (GeosGeometry *)GeosWkbReader_read(arg1,(unsigned char const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbReader_readHEX(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbReader *arg1 = (GeosWkbReader *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  int alloc2 = 0 ;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("GeosWkbReader::readHEX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbReader::readHEX",1,"GeosWkbReader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbReader,0))){
    SWIG_fail_ptr("WkbReader_readHEX",1,SWIGTYPE_p_GeosWkbReader);
  }
  
  {
    /* %typemap(in) (const unsigned char* wkb, size_t size) (int alloc2 = 0) */
    arg2 = luaL_checkstring(L, 1);
    arg3 = luaL_checknumber(L, 2);
    if (!arg2 || arg3 == 0)
    SWIG_exception(SWIG_RuntimeError, "Expecting a string");
  }
  {
    try
    {
      result = (GeosGeometry *)GeosWkbReader_readHEX(arg1,(unsigned char const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WkbReader(void *obj) {
GeosWkbReader *arg1 = (GeosWkbReader *) obj;
delete_GeosWkbReader(arg1);
}
static swig_lua_method swig_GeosWkbReader_methods[] = {
    {"read", _wrap_WkbReader_read}, 
    {"readHEX", _wrap_WkbReader_readHEX}, 
    {0,0}
};
static swig_lua_attribute swig_GeosWkbReader_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosWkbReader_bases[] = {0};
static const char *swig_GeosWkbReader_base_names[] = {0};
static swig_lua_class _wrap_class_GeosWkbReader = { "WkbReader", &SWIGTYPE_p_GeosWkbReader,_wrap_new_WkbReader, swig_delete_WkbReader, swig_GeosWkbReader_methods, swig_GeosWkbReader_attributes, swig_GeosWkbReader_bases, swig_GeosWkbReader_base_names };

static int _wrap_new_WkbWriter(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *result = 0 ;
  
  SWIG_check_num_args("GeosWkbWriter::GeosWkbWriter",0,0)
  {
    try
    {
      result = (GeosWkbWriter *)new_GeosWkbWriter();
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GeosWkbWriter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_getOutputDimension(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  int result;
  
  SWIG_check_num_args("GeosWkbWriter::getOutputDimension",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::getOutputDimension",1,"GeosWkbWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_getOutputDimension",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  {
    try
    {
      result = (int)GeosWkbWriter_getOutputDimension(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_setOutputDimension(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("GeosWkbWriter::setOutputDimension",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::setOutputDimension",1,"GeosWkbWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosWkbWriter::setOutputDimension",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_setOutputDimension",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    try
    {
      GeosWkbWriter_setOutputDimension(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_getByteOrder(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  int result;
  
  SWIG_check_num_args("GeosWkbWriter::getByteOrder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::getByteOrder",1,"GeosWkbWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_getByteOrder",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  {
    try
    {
      result = (int)GeosWkbWriter_getByteOrder(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_setByteOrder(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("GeosWkbWriter::setByteOrder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::setByteOrder",1,"GeosWkbWriter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("GeosWkbWriter::setByteOrder",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_setByteOrder",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  {
    try
    {
      GeosWkbWriter_setByteOrder(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_getIncludeSRID(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  bool result;
  
  SWIG_check_num_args("GeosWkbWriter::getIncludeSRID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::getIncludeSRID",1,"GeosWkbWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_getIncludeSRID",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  {
    try
    {
      result = (bool)GeosWkbWriter_getIncludeSRID(arg1);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_setIncludeSRID(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("GeosWkbWriter::setIncludeSRID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::setIncludeSRID",1,"GeosWkbWriter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("GeosWkbWriter::setIncludeSRID",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_setIncludeSRID",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  {
    try
    {
      GeosWkbWriter_setIncludeSRID(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t temp3 = 0 ;
  unsigned char *result = 0 ;
  
  {
    /* %typemap(in, numinputs=0) size_t *size (size_t temp3 = 0) */
    arg3 = &temp3;
  }
  SWIG_check_num_args("GeosWkbWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::write",1,"GeosWkbWriter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosWkbWriter::write",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_write",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("WkbWriter_write",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (unsigned char *)GeosWkbWriter_write(arg1,(GeosGeometry const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) unsigned char* */
  }
  {
    /* %typemap(argout) size_t *size */
    lua_pushlstring(L, result, *arg3);
  }
  {
    /* %typemap(freearg) size_t *size */
    free(result);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    /* %typemap(freearg) size_t *size */
    free(result);
  }
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WkbWriter_writeHEX(lua_State* L) {
  int SWIG_arg = 0;
  GeosWkbWriter *arg1 = (GeosWkbWriter *) 0 ;
  GeosGeometry *arg2 = (GeosGeometry *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t temp3 = 0 ;
  unsigned char *result = 0 ;
  
  {
    /* %typemap(in, numinputs=0) size_t *size (size_t temp3 = 0) */
    arg3 = &temp3;
  }
  SWIG_check_num_args("GeosWkbWriter::writeHEX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("GeosWkbWriter::writeHEX",1,"GeosWkbWriter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("GeosWkbWriter::writeHEX",2,"GeosGeometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_GeosWkbWriter,0))){
    SWIG_fail_ptr("WkbWriter_writeHEX",1,SWIGTYPE_p_GeosWkbWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GeosGeometry,0))){
    SWIG_fail_ptr("WkbWriter_writeHEX",2,SWIGTYPE_p_GeosGeometry);
  }
  
  {
    try
    {
      result = (unsigned char *)GeosWkbWriter_writeHEX(arg1,(GeosGeometry const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) unsigned char* */
  }
  {
    /* %typemap(argout) size_t *size */
    lua_pushlstring(L, result, *arg3);
  }
  {
    /* %typemap(freearg) size_t *size */
    free(result);
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  {
    /* %typemap(freearg) size_t *size */
    free(result);
  }
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WkbWriter(void *obj) {
GeosWkbWriter *arg1 = (GeosWkbWriter *) obj;
delete_GeosWkbWriter(arg1);
}
static swig_lua_method swig_GeosWkbWriter_methods[] = {
    {"getOutputDimension", _wrap_WkbWriter_getOutputDimension}, 
    {"setOutputDimension", _wrap_WkbWriter_setOutputDimension}, 
    {"getByteOrder", _wrap_WkbWriter_getByteOrder}, 
    {"setByteOrder", _wrap_WkbWriter_setByteOrder}, 
    {"getIncludeSRID", _wrap_WkbWriter_getIncludeSRID}, 
    {"setIncludeSRID", _wrap_WkbWriter_setIncludeSRID}, 
    {"write", _wrap_WkbWriter_write}, 
    {"writeHEX", _wrap_WkbWriter_writeHEX}, 
    {0,0}
};
static swig_lua_attribute swig_GeosWkbWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_GeosWkbWriter_bases[] = {0};
static const char *swig_GeosWkbWriter_base_names[] = {0};
static swig_lua_class _wrap_class_GeosWkbWriter = { "WkbWriter", &SWIGTYPE_p_GeosWkbWriter,_wrap_new_WkbWriter, swig_delete_WkbWriter, swig_GeosWkbWriter_methods, swig_GeosWkbWriter_attributes, swig_GeosWkbWriter_bases, swig_GeosWkbWriter_base_names };

static int _wrap_createEmptyPoint(lua_State* L) {
  int SWIG_arg = 0;
  GeosGeometry *result = 0 ;
  
  SWIG_check_num_args("createEmptyPoint",0,0)
  {
    try
    {
      result = (GeosGeometry *)createEmptyPoint();
    }
    catch (const std::exception& e)
    {
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    /* %typemap(out) GeosGeometry */
    
    if (result == NULL)
    SWIG_exception(SWIG_RuntimeError, message);
    
    GeosGeometry *geom = result;
    GEOSGeomTypes geomId = (GEOSGeomTypes)GEOSGeomTypeId((GEOSGeom) geom);
    
    switch (geomId)
    {
    case GEOS_POINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPoint, 1);
      break;
    case GEOS_LINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLineString, 1);
      break;
    case GEOS_LINEARRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosLinearRing, 1);
      break;
    case GEOS_POLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosPolygon, 1);
      break;
    case GEOS_MULTIPOINT:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPoint, 1);
      break;
    case GEOS_MULTILINESTRING:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiLineString, 1);
      break;
    case GEOS_MULTIPOLYGON:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosMultiPolygon, 1);
      break;
    case GEOS_GEOMETRYCOLLECTION:
      SWIG_NewPointerObj(L, (void *)(result), SWIGTYPE_p_GeosGeometryCollection, 1);
      break;
    default:
      lua_pushstring(L,"something bad happened");
      SWIG_fail;
    }
    SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "version", _wrap_version},
    { "createPoint", _wrap_createPoint},
    { "createLineString", _wrap_createLineString},
    { "createLinearRing", _wrap_createLinearRing},
    { "createPolygon", _wrap_createPolygon},
    { "createEmptyPoint", _wrap_createEmptyPoint},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"GEOS_VERSION_MAJOR", (long) 3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_VERSION_MINOR", (long) 5, 0, 0, 0},
{ SWIG_LUA_STRING,  (char *)"GEOS_VERSION", 0, 0, (void *)"3.5.0dev", 0},
{ SWIG_LUA_STRING,  (char *)"GEOS_JTS_PORT", 0, 0, (void *)"1.13.0", 0},
{ SWIG_LUA_INT,     (char *)"GEOS_CAPI_VERSION_MAJOR", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_CAPI_VERSION_MINOR", (long) 9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_CAPI_VERSION_PATCH", (long) 0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_CAPI_FIRST_INTERFACE", (long) 1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_CAPI_LAST_INTERFACE", (long) (1+9), 0, 0, 0},
{ SWIG_LUA_STRING,  (char *)"GEOS_CAPI_VERSION", 0, 0, (void *)"3.5.0dev-CAPI-1.9.0", 0},
{ SWIG_LUA_INT,     (char *)"GEOS_POINT", (long) GEOS_POINT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_LINESTRING", (long) GEOS_LINESTRING, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_LINEARRING", (long) GEOS_LINEARRING, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_POLYGON", (long) GEOS_POLYGON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_MULTIPOINT", (long) GEOS_MULTIPOINT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_MULTILINESTRING", (long) GEOS_MULTILINESTRING, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_MULTIPOLYGON", (long) GEOS_MULTIPOLYGON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_GEOMETRYCOLLECTION", (long) GEOS_GEOMETRYCOLLECTION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_WKB_XDR", (long) GEOS_WKB_XDR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"GEOS_WKB_NDR", (long) GEOS_WKB_NDR, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GeosMultiPolygonTo_p_GeosGeometryCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometryCollection *)  ((GeosMultiPolygon *) x));
}
static void *_p_GeosMultiPointTo_p_GeosGeometryCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometryCollection *)  ((GeosMultiPoint *) x));
}
static void *_p_GeosMultiLineStringTo_p_GeosGeometryCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometryCollection *)  ((GeosMultiLineString *) x));
}
static void *_p_GeosMultiLinearRingTo_p_GeosGeometryCollection(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometryCollection *)  ((GeosMultiLinearRing *) x));
}
static void *_p_GeosPolygonTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *)  ((GeosPolygon *) x));
}
static void *_p_GeosMultiPolygonTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *) (GeosGeometryCollection *) ((GeosMultiPolygon *) x));
}
static void *_p_GeosPointTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *)  ((GeosPoint *) x));
}
static void *_p_GeosLineStringTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *)  ((GeosLineString *) x));
}
static void *_p_GeosLinearRingTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *)  ((GeosLinearRing *) x));
}
static void *_p_GeosMultiPointTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *) (GeosGeometryCollection *) ((GeosMultiPoint *) x));
}
static void *_p_GeosMultiLineStringTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *) (GeosGeometryCollection *) ((GeosMultiLineString *) x));
}
static void *_p_GeosMultiLinearRingTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *) (GeosGeometryCollection *) ((GeosMultiLinearRing *) x));
}
static void *_p_GeosGeometryCollectionTo_p_GeosGeometry(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GeosGeometry *)  ((GeosGeometryCollection *) x));
}
static swig_type_info _swigt__p_GeosCoordinateSequence = {"_p_GeosCoordinateSequence", "GeosCoordinateSequence *", 0, 0, (void*)&_wrap_class_GeosCoordinateSequence, 0};
static swig_type_info _swigt__p_GeosGeometry = {"_p_GeosGeometry", "GeosGeometry *", 0, 0, (void*)&_wrap_class_GeosGeometry, 0};
static swig_type_info _swigt__p_GeosGeometryCollection = {"_p_GeosGeometryCollection", "GeosGeometryCollection *", 0, 0, (void*)&_wrap_class_GeosGeometryCollection, 0};
static swig_type_info _swigt__p_GeosIndexItem = {"_p_GeosIndexItem", "GeosIndexItem *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeosLineString = {"_p_GeosLineString", "GeosLineString *", 0, 0, (void*)&_wrap_class_GeosLineString, 0};
static swig_type_info _swigt__p_GeosLinearRing = {"_p_GeosLinearRing", "GeosLinearRing *", 0, 0, (void*)&_wrap_class_GeosLinearRing, 0};
static swig_type_info _swigt__p_GeosMultiLineString = {"_p_GeosMultiLineString", "GeosMultiLineString *", 0, 0, (void*)&_wrap_class_GeosMultiLineString, 0};
static swig_type_info _swigt__p_GeosMultiLinearRing = {"_p_GeosMultiLinearRing", "GeosMultiLinearRing *", 0, 0, (void*)&_wrap_class_GeosMultiLinearRing, 0};
static swig_type_info _swigt__p_GeosMultiPoint = {"_p_GeosMultiPoint", "GeosMultiPoint *", 0, 0, (void*)&_wrap_class_GeosMultiPoint, 0};
static swig_type_info _swigt__p_GeosMultiPolygon = {"_p_GeosMultiPolygon", "GeosMultiPolygon *", 0, 0, (void*)&_wrap_class_GeosMultiPolygon, 0};
static swig_type_info _swigt__p_GeosPoint = {"_p_GeosPoint", "GeosPoint *", 0, 0, (void*)&_wrap_class_GeosPoint, 0};
static swig_type_info _swigt__p_GeosPolygon = {"_p_GeosPolygon", "GeosPolygon *", 0, 0, (void*)&_wrap_class_GeosPolygon, 0};
static swig_type_info _swigt__p_GeosPreparedGeometry = {"_p_GeosPreparedGeometry", "GeosPreparedGeometry *", 0, 0, (void*)&_wrap_class_GeosPreparedGeometry, 0};
static swig_type_info _swigt__p_GeosQueryCallback = {"_p_GeosQueryCallback", "GeosQueryCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeosSTRtree = {"_p_GeosSTRtree", "GeosSTRtree *", 0, 0, (void*)&_wrap_class_GeosSTRtree, 0};
static swig_type_info _swigt__p_GeosWkbReader = {"_p_GeosWkbReader", "GeosWkbReader *", 0, 0, (void*)&_wrap_class_GeosWkbReader, 0};
static swig_type_info _swigt__p_GeosWkbWriter = {"_p_GeosWkbWriter", "GeosWkbWriter *", 0, 0, (void*)&_wrap_class_GeosWkbWriter, 0};
static swig_type_info _swigt__p_GeosWktReader = {"_p_GeosWktReader", "GeosWktReader *", 0, 0, (void*)&_wrap_class_GeosWktReader, 0};
static swig_type_info _swigt__p_GeosWktWriter = {"_p_GeosWktWriter", "GeosWktWriter *", 0, 0, (void*)&_wrap_class_GeosWktWriter, 0};
static swig_type_info _swigt__p_p_GeosLinearRing = {"_p_p_GeosLinearRing", "GeosLinearRing **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GeosCoordinateSequence,
  &_swigt__p_GeosGeometry,
  &_swigt__p_GeosGeometryCollection,
  &_swigt__p_GeosIndexItem,
  &_swigt__p_GeosLineString,
  &_swigt__p_GeosLinearRing,
  &_swigt__p_GeosMultiLineString,
  &_swigt__p_GeosMultiLinearRing,
  &_swigt__p_GeosMultiPoint,
  &_swigt__p_GeosMultiPolygon,
  &_swigt__p_GeosPoint,
  &_swigt__p_GeosPolygon,
  &_swigt__p_GeosPreparedGeometry,
  &_swigt__p_GeosQueryCallback,
  &_swigt__p_GeosSTRtree,
  &_swigt__p_GeosWkbReader,
  &_swigt__p_GeosWkbWriter,
  &_swigt__p_GeosWktReader,
  &_swigt__p_GeosWktWriter,
  &_swigt__p_p_GeosLinearRing,
  &_swigt__p_size_t,
  &_swigt__p_std__string,
  &_swigt__p_unsigned_char,
};

static swig_cast_info _swigc__p_GeosCoordinateSequence[] = {  {&_swigt__p_GeosCoordinateSequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosGeometry[] = {  {&_swigt__p_GeosPolygon, _p_GeosPolygonTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosMultiPolygon, _p_GeosMultiPolygonTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosPoint, _p_GeosPointTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosGeometry, 0, 0, 0},  {&_swigt__p_GeosLineString, _p_GeosLineStringTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosLinearRing, _p_GeosLinearRingTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosMultiPoint, _p_GeosMultiPointTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosMultiLineString, _p_GeosMultiLineStringTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosMultiLinearRing, _p_GeosMultiLinearRingTo_p_GeosGeometry, 0, 0},  {&_swigt__p_GeosGeometryCollection, _p_GeosGeometryCollectionTo_p_GeosGeometry, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosGeometryCollection[] = {  {&_swigt__p_GeosMultiPolygon, _p_GeosMultiPolygonTo_p_GeosGeometryCollection, 0, 0},  {&_swigt__p_GeosMultiPoint, _p_GeosMultiPointTo_p_GeosGeometryCollection, 0, 0},  {&_swigt__p_GeosMultiLineString, _p_GeosMultiLineStringTo_p_GeosGeometryCollection, 0, 0},  {&_swigt__p_GeosMultiLinearRing, _p_GeosMultiLinearRingTo_p_GeosGeometryCollection, 0, 0},  {&_swigt__p_GeosGeometryCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosIndexItem[] = {  {&_swigt__p_GeosIndexItem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosLineString[] = {  {&_swigt__p_GeosLineString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosLinearRing[] = {  {&_swigt__p_GeosLinearRing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosMultiLineString[] = {  {&_swigt__p_GeosMultiLineString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosMultiLinearRing[] = {  {&_swigt__p_GeosMultiLinearRing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosMultiPoint[] = {  {&_swigt__p_GeosMultiPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosMultiPolygon[] = {  {&_swigt__p_GeosMultiPolygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosPoint[] = {  {&_swigt__p_GeosPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosPolygon[] = {  {&_swigt__p_GeosPolygon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosPreparedGeometry[] = {  {&_swigt__p_GeosPreparedGeometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosQueryCallback[] = {  {&_swigt__p_GeosQueryCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosSTRtree[] = {  {&_swigt__p_GeosSTRtree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosWkbReader[] = {  {&_swigt__p_GeosWkbReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosWkbWriter[] = {  {&_swigt__p_GeosWkbWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosWktReader[] = {  {&_swigt__p_GeosWktReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeosWktWriter[] = {  {&_swigt__p_GeosWktWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_GeosLinearRing[] = {  {&_swigt__p_p_GeosLinearRing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GeosCoordinateSequence,
  _swigc__p_GeosGeometry,
  _swigc__p_GeosGeometryCollection,
  _swigc__p_GeosIndexItem,
  _swigc__p_GeosLineString,
  _swigc__p_GeosLinearRing,
  _swigc__p_GeosMultiLineString,
  _swigc__p_GeosMultiLinearRing,
  _swigc__p_GeosMultiPoint,
  _swigc__p_GeosMultiPolygon,
  _swigc__p_GeosPoint,
  _swigc__p_GeosPolygon,
  _swigc__p_GeosPreparedGeometry,
  _swigc__p_GeosQueryCallback,
  _swigc__p_GeosSTRtree,
  _swigc__p_GeosWkbReader,
  _swigc__p_GeosWkbWriter,
  _swigc__p_GeosWktReader,
  _swigc__p_GeosWktWriter,
  _swigc__p_p_GeosLinearRing,
  _swigc__p_size_t,
  _swigc__p_std__string,
  _swigc__p_unsigned_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  initGEOS(noticeHandler, errorHandler);
  
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

